{"version":3,"sources":["components/Home.js","components/Charts.js","components/WeatherComponent.js","components/SearchBar.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Component","Chart","props","state","chartData","labels","Date","getDate","datasets","label","data","backgroundColor","className","this","width","height","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","defaultProps","Weather","city","lat","lon","useState","list","setList","tomorrow","dayAfterTomorrow","later","laterTwo","date","toDateString","fetch","then","res","json","result","i","map","item","dt_txt","substr","toString","push","main","temp","des","setDesc","setTemp","icon","setIcon","humidity","setHumidity","windSpeed","setwindSpeed","resp","console","log","JSON","stringify","current","clouds","weather","description","Math","round","parseFloat","wind_speed","Fragment","onClick","window","location","reload","src","SearchBar","status","cityFound","updateCity","bind","getCity","event","setState","target","value","cod","coord","alert","preventDefault","onSubmit","id","onChange","placeholder","Main","Maincity","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3dadb47.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"HomeDiv\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartData: {\r\n                labels: [(new Date().getDate()-1), (new Date().getDate()-2), (new Date().getDate()-3), (new Date().getDate()-4), (new Date().getDate()-5), (new Date().getDate()-6), (new Date().getDate()-7)],\r\n                datasets: [\r\n                    {\r\n                        label: 'Humidity (in %)',\r\n                        data: [\r\n                            30,\r\n                            35,\r\n                            31,\r\n                            29,\r\n                            36,\r\n                            40,\r\n                            35\r\n                        ],\r\n                        backgroundColor: [\r\n                            'rgba(255, 255, 255, 1)',\r\n                            'rgba(54, 162, 235, 0.6)',\r\n                            'rgba(255, 206, 86, 0.6)',\r\n                            'rgba(75, 192, 192, 0.6)',\r\n                            'rgba(153, 102, 255, 0.6)',\r\n                            'rgba(255, 159, 64, 0.6)',\r\n                            'rgba(255, 255, 255, 0.6)'\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        displayTitle: true,\r\n        displayLegend: true,\r\n        legendPosition: 'right'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    width={100}\r\n                    height={20}\r\n\r\n                    options={{ \r\n                        title: {\r\n                            display:this.props.displayTitle,\r\n                            text: 'Humidity of last 7 days',\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: this.props.displayLegend,\r\n                            position: this.props.legendPosition\r\n                        }\r\n                     }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component, useEffect, useState } from 'react';\r\nimport Chart from './Charts';\r\n\r\n\r\n\r\n\r\nfunction Weather(props) {\r\n\r\n    //const city = props.city;\r\n    const city = props.city;\r\n    const lat = props.lat;\r\n    const lon = props.lon;\r\n    const [list,setList] = useState([]);\r\n    var tomorrow = [];\r\n    var dayAfterTomorrow = [];\r\n    var later = [];\r\n    var laterTwo = [];\r\n\r\n    var date = new Date();\r\n    date = date.toDateString();\r\n    \r\n    fetch('https://api.openweathermap.org/data/2.5/forecast?q=Eluru&appid=ea76099250443f57a27aa8bd170aca75')\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            setList(result.list);\r\n        }\r\n    )\r\n\r\n\r\n    var i=1;\r\n    while(i<=4) {\r\n        list.map(item => {\r\n            //console.log(\"Log: \" + item.dt_txt);\r\n            \r\n            var dd = item.dt_txt.substr(8,2);\r\n            //console.log(\"dd: \" + dd);\r\n            //var rr = (new Date().getDate() + i).toString();\r\n            //console.log(\"RRR: \" + rr);\r\n            \r\n            if(dd==(new Date().getDate() + i).toString()){\r\n                if(i==1) {\r\n                    tomorrow.push(item.main.temp);\r\n                }\r\n                if(i==2) {\r\n                    dayAfterTomorrow.push(item.main.temp);\r\n                }\r\n                if(i==3) {\r\n                    later.push(item.main.temp);\r\n                }\r\n                if(i==4) {\r\n                    laterTwo.push(item.main.temp);\r\n                }\r\n            }\r\n            \r\n        })\r\n        i = i+1;\r\n        \r\n    }\r\n\r\n\r\n        const [des, setDesc] = useState(\"\");\r\n        const [temp, setTemp] = useState();\r\n        const [icon, setIcon] = useState(\"\");\r\n        const [humidity, setHumidity] = useState();\r\n        const [windSpeed, setwindSpeed] = useState();\r\n\r\n        fetch('https://api.openweathermap.org/data/2.5/onecall?lat='+lat+'&lon='+lon+'&appid=ea76099250443f57a27aa8bd170aca75')\r\n    .then(function(resp) { return resp.json() })\r\n    .then((data) => {\r\n        console.log(\"Result: \" + JSON.stringify(data.current.clouds));\r\n        setDesc((data.current.weather[0].description));\r\n        setTemp(Math.round(parseFloat(data.current.temp)-273.15));\r\n        setIcon('http://openweathermap.org/img/wn/'+data.current.weather[0].icon+'@2x.png');\r\n        setHumidity(data.current.humidity);\r\n        setwindSpeed(data.current.wind_speed);\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n        \r\n    \r\n\r\n    );\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h6 onClick={() => window.location.reload(false)} className=\"reloadHead\">Click here to search again..</h6>\r\n                <div className=\"weatherBox container shadow animated fadeInUp\">\r\n                    <div className=\"bg-image\"></div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"weatherBoxContent\">\r\n                                <h2 className=\"display-4\">{city}</h2>\r\n                                <h6 className=\"\">{date}</h6><br></br>\r\n                                <img src={icon} />\r\n                                <h3>{des}</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <div className=\"weatherBoxTemp\">\r\n                                <h1 className=\"display-1\">{temp + '\\u00b0'}</h1>\r\n                                <br></br>\r\n                                <h5>Humidity: {humidity + '%'} | Wind speed: {windSpeed + 'm/sec'}</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <div className=\"row futureDataBox\">\r\n                        <div className=\"col\">\r\n                            <h6>TOMORROW</h6>\r\n                            <h5 className=\"display-4\">{Math.round(parseFloat(tomorrow[3]) - 273.15) + '\\u00b0'}</h5>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <h4>{new Date().getDate() + 2}</h4>\r\n                            <h5 className=\"display-4\">{Math.round(parseFloat(dayAfterTomorrow[3]) - 273.15) + '\\u00b0'}</h5>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <h4>{new Date().getDate() + 3}</h4>\r\n                            <h5 className=\"display-4\">{Math.round(parseFloat(later[3]) - 273.15) + '\\u00b0'}</h5>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <h4>{new Date().getDate() + 4}</h4>\r\n                            <h5 className=\"display-4\">{Math.round(parseFloat(laterTwo[3]) - 273.15) + '\\u00b0'}</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <br></br>\r\n                <Chart  legendPosition=\"bottom\" />\r\n\r\n             \r\n                \r\n           </React.Fragment>\r\n        );\r\n    }\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport Weather from './WeatherComponent';\r\n\r\nclass SearchBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            city: \"\",\r\n            status:false,\r\n            cityFound:false,\r\n            lat:0,\r\n            lon:0\r\n        };\r\n        this.updateCity = this.updateCity.bind(this);\r\n        this.getCity = this.getCity.bind(this);\r\n    }\r\n\r\n    updateCity(event) {\r\n        this.setState({city: event.target.value});\r\n    }\r\n\r\n\r\n\r\n    getCity(event) {\r\n        fetch('https://api.openweathermap.org/data/2.5/weather?q='+this.state.city+'&appid=ea76099250443f57a27aa8bd170aca75')\r\n        .then(function(resp) { return resp.json() })\r\n        .then((data) => {\r\n            if(data.cod == 200) {\r\n                this.setState({cityFound:true});\r\n                this.setState({lat:data.coord.lat});\r\n                this.setState({lon:data.coord.lon});\r\n                console.log(\"City Found\");\r\n            }\r\n            else if(data.cod == 404) {\r\n                this.setState({cityFound:false});\r\n                console.log(\"City not found\");\r\n                alert(\"City not found\")\r\n               \r\n                \r\n            }\r\n        });\r\n        \r\n        event.preventDefault();\r\n        \r\n    }\r\n\r\n    \r\n    \r\n    render() {\r\n        console.log(\"City is: \" + this.state.city);\r\n        \r\n        if(this.state.cityFound==false) {\r\n            \r\n            return (\r\n                <>\r\n                        <form onSubmit={this.getCity}>\r\n                            <input id=\"standard-basic\" label=\"Standard\"  onChange={this.updateCity} value={this.state.city} className=\"cityInput shadow-sm animated fadeIn\" placeholder=\"Enter city name\" />\r\n                        </form>\r\n                </>\r\n            );\r\n            \r\n        }\r\n        else if(this.state.cityFound == true) {\r\n            \r\n            return (\r\n                <div>\r\n                    <Weather city={this.state.city} lat={this.state.lat} lon={this.state.lon} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <form onSubmit={this.getCity}>\r\n                    <input id=\"standard-basic\" label=\"Standard\"  onChange={this.updateCity} value={this.state.city}  className=\"cityInput shadow animated fadeIn\" />\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React, { Component } from 'react';\r\nimport SearchBar from './SearchBar';\r\n\r\nclass Main extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            Maincity: null\r\n        };\r\n\r\n    }\r\n\r\n    updateCity(city) {\r\n        this.setState({Maincity: city});\r\n        console.log(\"City updated:\"+this.state.Maincity);\r\n    }\r\n\r\n   \r\n\r\n    render() {\r\n        console.log(\"From main: \" + this.state.Maincity);\r\n        return (\r\n            <React.Fragment>\r\n                <h1 className=\"display-3 titleTag\">Weather App</h1>\r\n                <SearchBar className=\"container\" />\r\n                <br></br><br></br>\r\n                \r\n            </React.Fragment>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Home from './components/Home';\nimport Weather from './components/WeatherComponent';\nimport './App.css';\nimport Main from './components/MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './animate.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}